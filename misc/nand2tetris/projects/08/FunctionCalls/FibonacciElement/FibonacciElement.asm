@256
D=A
@SP
M=D
@5
D=A
@R13
M=D
@Sys.init
D=A
@R14
M=D
@GLOBAL$lbl0.ret
D=A
@CALL_PUSH_CODE
0;JMP
(GLOBAL$lbl0.ret)
//===== FunctionCalls/FibonacciElement/Main.vm =====
// L11: function Main.fibonacci 0
(Main.fibonacci)
// L12: push argument 0
@ARG
A=M
D=M
@SP
AM=M+1
A=A-1
M=D
// L13: push constant 2
@2
D=A
@SP
AM=M+1
A=A-1
M=D
// L14: lt
@Main.fibonacci$lbl0
D=A
@R14
M=D
@ARITH_OP_LT
0;JMP
(Main.fibonacci$lbl0)
// L15: if-goto IF_TRUE
@SP
AM=M-1
D=M
@Main.fibonacci$IF_TRUE
D;JNE
// L16: goto IF_FALSE
@Main.fibonacci$IF_FALSE
0;JMP
// L17: label IF_TRUE
(Main.fibonacci$IF_TRUE)
// L18: push argument 0
@ARG
A=M
D=M
@SP
AM=M+1
A=A-1
M=D
// L19: return
@RETURN_POP_CODE
0;JMP
// L20: label IF_FALSE
(Main.fibonacci$IF_FALSE)
// L21: push argument 0
@ARG
A=M
D=M
@SP
AM=M+1
A=A-1
M=D
// L22: push constant 2
@2
D=A
@SP
AM=M+1
A=A-1
M=D
// L23: sub
@Main.fibonacci$lbl1
D=A
@R14
M=D
@ARITH_OP_SUB
0;JMP
(Main.fibonacci$lbl1)
// L24: call Main.fibonacci 1
@6
D=A
@R13
M=D
@Main.fibonacci
D=A
@R14
M=D
@Main.fibonacci$lbl2.ret
D=A
@CALL_PUSH_CODE
0;JMP
(Main.fibonacci$lbl2.ret)
// L25: push argument 0
@ARG
A=M
D=M
@SP
AM=M+1
A=A-1
M=D
// L26: push constant 1
@SP
AM=M+1
A=A-1
M=1
// L27: sub
@Main.fibonacci$lbl3
D=A
@R14
M=D
@ARITH_OP_SUB
0;JMP
(Main.fibonacci$lbl3)
// L28: call Main.fibonacci 1
@6
D=A
@R13
M=D
@Main.fibonacci
D=A
@R14
M=D
@Main.fibonacci$lbl4.ret
D=A
@CALL_PUSH_CODE
0;JMP
(Main.fibonacci$lbl4.ret)
// L29: add
@Main.fibonacci$lbl5
D=A
@R14
M=D
@ARITH_OP_ADD
0;JMP
(Main.fibonacci$lbl5)
// L30: return
@RETURN_POP_CODE
0;JMP
//===== FunctionCalls/FibonacciElement/Sys.vm =====
// L11: function Sys.init 0
(Sys.init)
// L12: push constant 4
@4
D=A
@SP
AM=M+1
A=A-1
M=D
// L13: call Main.fibonacci 1
@6
D=A
@R13
M=D
@Main.fibonacci
D=A
@R14
M=D
@Sys.init$lbl0.ret
D=A
@CALL_PUSH_CODE
0;JMP
(Sys.init$lbl0.ret)
// L14: label WHILE
(Sys.init$WHILE)
// L15: goto WHILE
@Sys.init$WHILE
0;JMP
(CALL_PUSH_CODE)
@SP
AM=M+1
A=A-1
M=D
@LCL
D=M
@SP
AM=M+1
A=A-1
M=D
@ARG
D=M
@SP
AM=M+1
A=A-1
M=D
@THIS
D=M
@SP
AM=M+1
A=A-1
M=D
@THAT
D=M
@SP
AM=M+1
A=A-1
M=D
@SP
D=M
@LCL
M=D
@SP
D=M
@R13
D=D-M
@ARG
M=D
@R14
A=M
0;JMP
@R15
A=M
0;JMP
(RETURN_POP_CODE)
@LCL
D=M
@5
A=D-A
D=M
@R14
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@LCL
D=M
@R13
AM=D-1
D=M
@THAT
M=D
@R13
AM=M-1
D=M
@THIS
M=D
@R13
AM=M-1
D=M
@ARG
M=D
@R13
AM=M-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
(ARITH_OP_ADD)
@SP
AM=M-1
D=M
@R13
M=D
@SP
AM=M-1
D=M
@R13
D=D+M
@SP
AM=M+1
A=A-1
M=D
@R14
A=M
0;JMP
(ARITH_OP_GT)
@SP
AM=M-1
D=M
@R13
M=D
@SP
AM=M-1
D=M
@R13
D=D-M
@GLOBAL$lbl1.true
D;JGT
D=0
@GLOBAL$lbl1.ok
0;JMP
(GLOBAL$lbl1.true)
D=-1
(GLOBAL$lbl1.ok)
@SP
AM=M+1
A=A-1
M=D
@R14
A=M
0;JMP
(ARITH_OP_OR)
@SP
AM=M-1
D=M
@R13
M=D
@SP
AM=M-1
D=M
@R13
D=D|M
@SP
AM=M+1
A=A-1
M=D
@R14
A=M
0;JMP
(ARITH_OP_AND)
@SP
AM=M-1
D=M
@R13
M=D
@SP
AM=M-1
D=M
@R13
D=D&M
@SP
AM=M+1
A=A-1
M=D
@R14
A=M
0;JMP
(ARITH_OP_LT)
@SP
AM=M-1
D=M
@R13
M=D
@SP
AM=M-1
D=M
@R13
D=D-M
@GLOBAL$lbl2.true
D;JLT
D=0
@GLOBAL$lbl2.ok
0;JMP
(GLOBAL$lbl2.true)
D=-1
(GLOBAL$lbl2.ok)
@SP
AM=M+1
A=A-1
M=D
@R14
A=M
0;JMP
(ARITH_OP_NOT)
@SP
AM=M-1
D=M
D=!D
@SP
AM=M+1
A=A-1
M=D
@R14
A=M
0;JMP
(ARITH_OP_SUB)
@SP
AM=M-1
D=M
@R13
M=D
@SP
AM=M-1
D=M
@R13
D=D-M
@SP
AM=M+1
A=A-1
M=D
@R14
A=M
0;JMP
(ARITH_OP_EQ)
@SP
AM=M-1
D=M
@R13
M=D
@SP
AM=M-1
D=M
@R13
D=D-M
@GLOBAL$lbl3.true
D;JEQ
D=0
@GLOBAL$lbl3.ok
0;JMP
(GLOBAL$lbl3.true)
D=-1
(GLOBAL$lbl3.ok)
@SP
AM=M+1
A=A-1
M=D
@R14
A=M
0;JMP
(ARITH_OP_NEG)
@SP
AM=M-1
D=M
D=-D
@SP
AM=M+1
A=A-1
M=D
@R14
A=M
0;JMP
