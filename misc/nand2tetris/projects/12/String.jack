// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array base;
    field int off, limit;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0) {
            let maxLength = maxLength + 32;
        }
        let base = Array.new(maxLength);
        let off = 0;
        let limit = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (~(limit = 0)) {
            do base.dispose();
        }
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return off;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return base[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (j < off) {
            let base[j] = c;
        }
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        var Array temp;
        var int i, nlimit;

        if (~(off < limit)) {
            let nlimit = limit + 32;
            let temp = Array.new(nlimit);
            while (i < off) {
                let temp[i] = base[i];
                let i = i + 1;
            }
            if (~(limit = 0)) {
                do base.dispose();
            }
            let limit = nlimit;
            let base = temp;
        }
        let base[off] = c;
        let off = off + 1;
        return this;
    }


    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (~(off = 0)) {
            let off = off - 1;
        }
        return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        var int sum, i, ch;
        var boolean neg;
        let sum = 0;
        let i = 0;
        let neg = false;
        if ((limit > 0) & (base[i] = 45)) {
            let i = i + 1;
            let neg = true;
        }
        while (i < off) {
            let ch = base[i];
            if ((ch > 47) & (ch < 58)) {
                let sum = (sum * 10) + (ch - 48);
            } else {
                return sum;
            }
            let i = i + 1;
        }
        if (neg) {
            let sum = -sum;
        }
        return sum;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int ch, i, j, q;
        let off = 0;
        if (val < 0) {
            let base[off] = 45;
            let off = off + 1;
            let val = -val;
        }
        let i = off;
        while ((off < limit) & (val > 0)) {
            let q = val / 10;
            let ch = val - (q * 10) + 48;
            let base[off] = ch;
            let j = off;
            let off = off + 1;
            let val = q;
        }
        // reverse i..j
        while (i < j) {
            let ch = base[i];
            let base[i] = base[j];
            let base[j] = ch;
            let i = i + 1;
            let j = j - 1;
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
