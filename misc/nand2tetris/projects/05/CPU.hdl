// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // ========== ARegister ==========
    Mux16(a = instruction, b = aluOutput, sel = instruction[15], out = arInput);
    // (instruction[15] = 0 or instruction[5] = 1) to loadAR
    Not(in = instruction[15], out = tmp0);
    Or(a = tmp0, b = instruction[5], out = loadAR);
    ARegister(in = arInput, load = loadAR, out = arOutput, out[0..14] = addressM);

    // ========== writeM ==========
    // Bit can impose writeM output in the same cycle with others.
    //Bit(in = instruction[15], load = instruction[3], out = writeM);
    And(a = instruction[15], b = instruction[3], out = writeM);

    // ========== DRegister ==========
    // (instruction[15] = 1 and instruction[4] = 1) to loadDR
    And(a = instruction[15], b = instruction[4], out = loadDR);
    DRegister(in = aluOutput, load = loadDR, out = drOutput);

    // ========== ALU ==========
    Mux16(a = arOutput, b = inM, sel = instruction[12], out = aluInput);
    ALU(x = drOutput, y = aluInput,
        zx = instruction[11],
        nx = instruction[10],
        zy = instruction[9],
        ny = instruction[8],
        f = instruction[7],
        no = instruction[6],
        out = aluOutput, zr = zr, ng = ng,
        out = outM);

    // ========== PC ==========
    // C instruction. instruction[15] = 1
    // 1. j3 and !zr and !ng
    // 2. j2 and zr
    // 3. j2 and j3 and !ng
    // 4. j1 and ng
    // 5. j1 and j3 and !zr
    // 6. j1 and j2 and (zr or ng)
    // 7. j1 and j2 and j3

    // j1 = instruction[2], j2 = instruction[1], j3 = instruction[0]
    Or(a = zr, b = ng, out = zrng);
    Not(in = zrng, out = zrngNeg);
    And(a = instruction[0], b = zrngNeg, out = jb1);

    And(a = instruction[1], b = zr, out = jb2);

    Not(in = ng, out = ngNeg);
    And(a = instruction[1], b = instruction[0], out = tj1);
    And(a = tj1, b = ngNeg, out = jb3);

    And(a = instruction[2], b = ng, out = jb4);

    Not(in = zr, out = zrNeg);
    And(a = instruction[2], b = instruction[0], out = tj2);
    And(a = tj2, b = zrNeg, out = jb5);

    And(a = instruction[2], b = instruction[1], out = tj3);
    And(a = tj3, b = zrng, out = jb6);

    And(a = tj3, b = instruction[0], out = jb7);

    Or(a = jb1, b = jb2, out = tj4);
    Or(a = tj4, b = jb3, out = tj5);
    Or(a = tj5, b = jb4, out = tj6);
    Or(a = tj6, b = jb5, out = tj7);
    Or(a = tj7, b = jb6, out = tj8);
    Or(a = tj8, b = jb7, out = tj9);

    And(a = tj9, b = instruction[15], out = pcJmp);
    Not(in = pcJmp, out = pcInc);

    PC(in = arOutput, reset = reset, load = pcJmp, inc = pcInc, out[0..14] = pc);
}