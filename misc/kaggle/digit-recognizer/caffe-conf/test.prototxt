name: "LeNet"
input: "data"
input_dim: 10
input_dim: 1
input_dim: 28
input_dim: 28

layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 32
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 1
  }
}
layer {
  name: "relu1"
  type: "TanH"
  bottom: "pool1"
  top: "relu1"
}
# layer {
#   name: "drop1"
#   type: "Dropout"
#   bottom: "relu1"
#   top: "drop1"
#   dropout_param {
#     dropout_ratio: 0.5
#   }
# }
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "relu1"
  top: "conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 64
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "relu2"
  type: "TanH"
  bottom: "pool2"
  top: "relu2"
}
# layer {
#   name: "drop2"
#   type: "Dropout"
#   bottom: "relu2"
#   top: "drop2"
#   dropout_param {
#     dropout_ratio: 0.5
#   }
# }
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "relu2"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 500
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip1"
  top: "relu3"
}
# layer {
#   name: "drop3"
#   type: "Dropout"
#   bottom: "relu3"
#   top: "drop3"
#   dropout_param {
#     dropout_ratio: 0.5
#   }
# }
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "relu3"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "prob"
  type: "Softmax"
  bottom: "ip2"
  top: "prob"
}
