#!/usr/bin/env python
# coding:utf-8
# Copyright (C) dirlt

from typing import List


class Solution:
    def earliestFullBloom(self, plantTime: List[int], growTime: List[int]) -> int:
        n = len(plantTime)
        MaxTime = sum(plantTime) + max(growTime)

        def test(t):
            ps = []
            for i in range(n):
                relax = t - growTime[i]
                ps.append((plantTime[i], relax))
            ps.sort(key=lambda x: x[1])
            acc = 0
            for i in range(n):
                acc += ps[i][0]
                if acc > ps[i][1]:
                    return False
            return True

        s, e = 0, MaxTime
        while s <= e:
            m = (s + e) // 2
            if test(m):
                e = m - 1
            else:
                s = m + 1
        return s


true, false, null = True, False, None
cases = [
    ([1, 4, 3], [2, 3, 1], 9),
    ([1, 2, 3, 2], [2, 1, 2, 1], 9),
    ([1], [1], 2),
    ([7341, 8118, 5990, 7379, 4007, 2243, 3357, 5757, 784, 8425, 5845, 8211, 7770, 7811, 6925, 5716, 1696, 4283, 8595,
      4120, 59, 8564, 1859, 8093, 6417, 4589, 7284, 2720, 3686, 5716, 3155, 3377, 5635, 2749, 3287, 1833, 8075, 5217,
      8746, 6093, 5254, 4781, 8030, 8837, 6898, 2478, 5175, 1796, 1235, 7849, 4154, 4128, 8309, 5830, 1628, 3797, 8576,
      6954, 180, 8954, 8012, 1053, 4485, 4109, 3414, 6711, 2526, 7611, 1050, 2153, 5954, 1984, 2348, 6031, 1379, 7778,
      3185, 4359, 4447, 8641, 7340, 5531, 1106, 4226, 6278, 2450, 2371, 1918, 2648, 4244, 6779, 6506, 1116, 2762, 4005,
      908, 6077, 5404, 6338, 1611, 5787, 3839, 6199, 656, 1514, 6324, 1979, 1151, 12, 354, 8557, 4080, 4035, 6632, 342,
      2000, 4012, 7098, 6869, 3025, 3577, 3122, 3360, 5550, 2671, 6268, 1356, 7747, 7459, 2422, 7494, 8762, 3234, 8618,
      3614, 3464, 7830, 5553, 623, 509, 4234, 920, 2355, 3004, 2020, 3709, 1151, 6487, 7309, 2531, 2268, 6795, 7458,
      3354, 4952, 7091, 2720, 4237, 4106, 348, 1752, 3617, 3204, 5903, 4821, 751, 7436, 715, 4329, 3922, 4039, 3551,
      6756, 6153, 7999, 4070, 335, 1485, 2655, 4756, 2022, 3227, 7952, 4960, 1407, 6535, 725, 7564, 754, 4356, 4910,
      8627, 2618, 1697, 2625, 974, 8659, 969, 3697, 2587, 1011, 8556, 7096, 1010, 3080, 1291, 4391, 6692, 2337, 4510,
      1511, 4079, 2944, 1733, 7187, 7702, 3758, 832, 2250, 3624, 5612, 2459, 2778, 1547, 6313, 1591, 8369, 2139, 7489,
      6115, 6269, 1112, 1931, 1386, 7530, 3302, 3329, 8280, 1969, 748, 7776, 5567, 6020, 6547, 8703, 3991, 1211, 1104,
      5159, 7652, 7729, 2351, 3717, 8737, 6022, 7693, 5134, 8929, 3161, 4244, 5015, 7391, 4206, 1398, 3047, 2261, 4256,
      4357, 31, 8343, 7382, 112, 3427, 2364, 1066, 7902, 8552, 7538, 5605, 3832, 309, 1519, 6888, 4949, 6402, 2489,
      3126, 7421, 3166, 1786, 5874, 362, 6256],
     [8052, 7063, 6000, 3399, 2992, 1221, 5276, 1240, 7694, 6257, 8224, 3847, 8361, 5187, 2375, 7718, 946, 9000, 7818,
      6588, 6803, 5286, 7604, 7857, 7435, 7359, 6101, 1588, 7875, 1267, 839, 4879, 7058, 6316, 3264, 7675, 5404, 2781,
      4969, 7426, 2684, 2582, 149, 618, 2321, 579, 3771, 4964, 7102, 3953, 1927, 5714, 8099, 1081, 4663, 1789, 6382,
      4763, 7914, 5570, 7542, 736, 2082, 4976, 1246, 4982, 7961, 8676, 7746, 7099, 97, 4348, 4210, 2374, 6022, 6544,
      6546, 5324, 6468, 7015, 8964, 1368, 7321, 831, 2100, 6938, 3198, 7486, 3441, 113, 6106, 6166, 5049, 1195, 7492,
      4534, 7653, 931, 6273, 5987, 1123, 4333, 1820, 4104, 5097, 4278, 3409, 1527, 3000, 7586, 4005, 2683, 5185, 4563,
      4806, 2312, 8311, 8388, 2549, 681, 3820, 4754, 8989, 5551, 4519, 4585, 8939, 6316, 2664, 5745, 4745, 6167, 7602,
      4673, 3076, 8287, 7495, 7325, 960, 2687, 7138, 2453, 8142, 2319, 5636, 6813, 64, 8002, 346, 6103, 6245, 2205,
      3223, 8140, 8086, 575, 3676, 205, 2011, 3002, 7952, 1764, 7447, 4138, 250, 159, 8665, 549, 4868, 7198, 5373, 7579,
      3320, 3027, 8129, 7757, 8348, 6848, 8217, 4253, 8387, 6336, 1900, 8298, 2274, 6434, 2403, 7975, 6988, 2708, 7842,
      4002, 5865, 1823, 6236, 431, 1101, 8204, 6425, 1570, 1149, 7725, 8802, 5695, 1360, 2387, 1330, 828, 4281, 3826,
      6400, 1998, 2358, 4462, 7502, 1759, 5693, 6035, 2613, 3233, 2898, 7534, 2460, 8700, 4663, 6841, 7649, 3758, 3069,
      4719, 3435, 3237, 2388, 627, 5632, 6968, 3702, 1991, 3087, 3178, 4153, 151, 8827, 7640, 4422, 2174, 497, 6761,
      1585, 4541, 6959, 6854, 2088, 8232, 6853, 2455, 833, 5981, 2591, 7174, 4767, 6154, 7663, 7382, 6362, 7848, 7523,
      6905, 8708, 5485, 612, 8943, 2573, 8741, 5481, 5242, 7704, 6936, 1938, 4022, 6453, 8834, 7832, 3414, 3108, 6954,
      2949, 2352, 634, 5810, 7500, 6476, 2903], 1289084),
]

import aatest_helper

aatest_helper.run_test_cases(Solution().earliestFullBloom, cases)

if __name__ == '__main__':
    pass
