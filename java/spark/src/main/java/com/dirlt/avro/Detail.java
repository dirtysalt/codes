/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.dirlt.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Detail extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Detail\",\"namespace\":\"com.dirlt.avro\",\"fields\":[{\"name\":\"f1\",\"type\":\"string\"},{\"name\":\"f2\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence f1;
  @Deprecated public java.lang.CharSequence f2;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Detail() {}

  /**
   * All-args constructor.
   */
  public Detail(java.lang.CharSequence f1, java.lang.CharSequence f2) {
    this.f1 = f1;
    this.f2 = f2;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return f1;
    case 1: return f2;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: f1 = (java.lang.CharSequence)value$; break;
    case 1: f2 = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'f1' field.
   */
  public java.lang.CharSequence getF1() {
    return f1;
  }

  /**
   * Sets the value of the 'f1' field.
   * @param value the value to set.
   */
  public void setF1(java.lang.CharSequence value) {
    this.f1 = value;
  }

  /**
   * Gets the value of the 'f2' field.
   */
  public java.lang.CharSequence getF2() {
    return f2;
  }

  /**
   * Sets the value of the 'f2' field.
   * @param value the value to set.
   */
  public void setF2(java.lang.CharSequence value) {
    this.f2 = value;
  }

  /** Creates a new Detail RecordBuilder */
  public static com.dirlt.avro.Detail.Builder newBuilder() {
    return new com.dirlt.avro.Detail.Builder();
  }
  
  /** Creates a new Detail RecordBuilder by copying an existing Builder */
  public static com.dirlt.avro.Detail.Builder newBuilder(com.dirlt.avro.Detail.Builder other) {
    return new com.dirlt.avro.Detail.Builder(other);
  }
  
  /** Creates a new Detail RecordBuilder by copying an existing Detail instance */
  public static com.dirlt.avro.Detail.Builder newBuilder(com.dirlt.avro.Detail other) {
    return new com.dirlt.avro.Detail.Builder(other);
  }
  
  /**
   * RecordBuilder for Detail instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Detail>
    implements org.apache.avro.data.RecordBuilder<Detail> {

    private java.lang.CharSequence f1;
    private java.lang.CharSequence f2;

    /** Creates a new Builder */
    private Builder() {
      super(com.dirlt.avro.Detail.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.dirlt.avro.Detail.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.f1)) {
        this.f1 = data().deepCopy(fields()[0].schema(), other.f1);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.f2)) {
        this.f2 = data().deepCopy(fields()[1].schema(), other.f2);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Detail instance */
    private Builder(com.dirlt.avro.Detail other) {
            super(com.dirlt.avro.Detail.SCHEMA$);
      if (isValidValue(fields()[0], other.f1)) {
        this.f1 = data().deepCopy(fields()[0].schema(), other.f1);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.f2)) {
        this.f2 = data().deepCopy(fields()[1].schema(), other.f2);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'f1' field */
    public java.lang.CharSequence getF1() {
      return f1;
    }
    
    /** Sets the value of the 'f1' field */
    public com.dirlt.avro.Detail.Builder setF1(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.f1 = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'f1' field has been set */
    public boolean hasF1() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'f1' field */
    public com.dirlt.avro.Detail.Builder clearF1() {
      f1 = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'f2' field */
    public java.lang.CharSequence getF2() {
      return f2;
    }
    
    /** Sets the value of the 'f2' field */
    public com.dirlt.avro.Detail.Builder setF2(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.f2 = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'f2' field has been set */
    public boolean hasF2() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'f2' field */
    public com.dirlt.avro.Detail.Builder clearF2() {
      f2 = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public Detail build() {
      try {
        Detail record = new Detail();
        record.f1 = fieldSetFlags()[0] ? this.f1 : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.f2 = fieldSetFlags()[1] ? this.f2 : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
